syntax = "proto3";

package lagompb.v1;

option csharp_namespace = "Lagompb.V1";
option go_package = "lagompbv1";
option java_multiple_files = true;
option java_outer_classname = "CoreProto";
option java_package = "io.superflat.lagompb.protobuf.v1";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

//  Helper protobuf for serializing the command and akka actor reference
//    during command serde between actors. This is needed to design lagom
//    commands with proto, since the actorRef is not a proto-serializable
//    type by default. During serialization, the LagomPbCommand case class
//    is converted into this protobuf and sent between actors as a
//    bytearray
//
message CommandWrapper {
  // the actual command
  google.protobuf.Any command = 1;
  // the actor ref
  bytes actor_ref = 2;
  // additional data to be added to the state meta
  map<string, string> data = 3;
}

// FailureResponse. This response type is returned by the
// Commands Handler
message FailureResponse {
  // the failure type
  oneof failure_type {
    // Critical failure will result into an 13-INTERNAL for a gRPC call and
    // 500-Internal Server Error for a HTTP/Json call
    google.protobuf.StringValue critical = 1;
    // Custom error details will be handled by the implementor.
    // A error handler must be implemented to handle this type of errors.
    // When an cutom error is sent and there is no error handler then the error
    // will be handled as if it were a critical failure type
    google.protobuf.Any custom = 2;
    // Validation failure type will result into 3-INVALID_ARGUMENT for a gRPC
    // call and 400-Bad Request for an HTTP/Json call
    google.protobuf.StringValue validation = 3;
    // Not found failure type will result into 5-NOT_FOUND for a gRPC call and
    // a 404-Not Found for an HTTP/Json call
    google.protobuf.StringValue not_found = 4;
  }
}

// For returning a command reply whether it is successful or failed
// This is used internally by lagom-pb
message CommandReply {
  // the actual command reply
  oneof reply {
    // actual state is wrapped with meta data
    StateWrapper state_wrapper = 1;
    // failed command reply
    FailureResponse failure = 2;
  }
}

// Additional data for the
// entity State
message MetaData {
  // the entity unique identifier
  string entity_id = 1;
  // the revision number for the entity, increases sequentially
  // this is very useful to handle optimistic lock
  uint32 revision_number = 2;
  // the time the state has been modified
  google.protobuf.Timestamp revision_date = 3;
  // use to store additional data.
  map<string, google.protobuf.Any> data = 4;
}

// Wrap the aggregate state and the meta data.
message StateWrapper {
  // the entity state
  google.protobuf.Any state = 1;
  // metadata from the event that made this state
  MetaData meta = 2;
}

// EventWrapper is an event wrapper that holds both the
// event and the corresponding aggregate root state.
message EventWrapper {
  // the event emitted
  google.protobuf.Any event = 1;
  // the state obtained from processing the event
  google.protobuf.Any resulting_state = 2;
  // meta data
  MetaData meta = 3;
}

// Response sent by a command handler after processing a command.
message CommandHandlerResponse {
  // actual command handler response
  oneof response {
    // the actual event to be persisted
    google.protobuf.Any event = 1;
    // the failed response
    FailureResponse failure = 2;
  }
}
